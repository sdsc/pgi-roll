<?xml version="1.0" standalone="no"?>

<kickstart>

<description>
Software Environment Modules 3.2.5 common configuration for PGI compilers
http://modules.sourceforge.net
</description>

<copyright>
Copyright (c) 2000 - 2009 The Regents of the University of California.
All rights reserved. Rocks(r) v5.1 www.rocksclusters.org
</copyright>

<changelog>
</changelog>

<post>

# Make sure modules package reads modulefiles from /opt/modulefiles/compilers
line='setenv MODULEPATH /opt/modulefiles/compilers:$MODULEPATH'
if test `grep -Fc "$line" /etc/profile.d/modules.csh` = 0; then
  echo "$line" >> /etc/profile.d/modules.csh
fi
line='export MODULEPATH=/opt/modulefiles/compilers:$MODULEPATH'
if test `grep -Fc "$line" /etc/profile.d/modules.sh` = 0; then
  echo "$line" >> /etc/profile.d/modules.sh
fi

# Add module files for the PGI compilers
<!-- env vars in <file> tags don't work, so use fixed-path temps -->
/bin/mkdir -m 0755 -p /opt/modulefiles/compilers/pgi
/bin/mkdir -m 0755 -p /opt/modulefiles/.tmp
export version=8.0

<file name="/opt/modulefiles/.tmp/pgi" perms="0644">
#%Module1.0
module-whatis "pgi Compiler"
module-whatis "Version: VERSION"
module-whatis "Description: pgi Compiler (C/C++/Fortran)"
# Allow unload only from another (compiler) module's load
if {[module-info mode remove] &amp;&amp; ! [module-info mode load]} {
  puts stderr "Cannot unload compiler module"
  puts stderr "Load a different compiler module instead"
  exit 1
}
# If loading, first unload potentially compiler-dependent modules, followed by
# other compiler modules
set compilers [list]
set noncompilers [list]
if { [info exists env(LOADEDMODULES)] &amp;&amp; ! [module-info mode remove] } {
  foreach mod [split $env(LOADEDMODULES) ":"] {
    if { ! [file exists "/opt/modulefiles/compilers/$mod"] } {
      lappend noncompilers $mod
    } elseif {$mod ne [module-info name]} {
      lappend compilers $mod
    }
  }
}
foreach mod [concat $noncompilers $compilers] {
  module unload $mod
}
# Compiler environment modifications
prepend-path PATH "/opt/pgi/linux86-64/VERSION/bin"
prepend-path LD_LIBRARY_PATH "/opt/pgi/linux86-64/VERSION/libso"
# Reload non-compiler modules
foreach mod $noncompilers {
  module load $mod
}
</file>
/usr/bin/perl -pi -e "s/VERSION/$version/" /opt/modulefiles/.tmp/pgi
/bin/cp /opt/modulefiles/.tmp/pgi /opt/modulefiles/compilers/pgi/$version

<file name="/opt/modulefiles/.tmp/pgi.version" perms="0644">
#%Module1.0
set ModulesVersion "VERSION"
</file>
/usr/bin/perl -pi -e "s/VERSION/$version/" /opt/modulefiles/.tmp/pgi.version
/bin/cp /opt/modulefiles/.tmp/pgi.version \
        /opt/modulefiles/compilers/pgi/.version.$version

/bin/ln -s /opt/modulefiles/compilers/pgi/.version.$version \
           /opt/modulefiles/compilers/pgi/.version

# Add module files for the pre-installed GCC compilers
/bin/mkdir -m 0755 -p /opt/modulefiles/compilers/gcc
export version=`gcc --version | head -1 | awk ' {print $3}'`

<file name="/opt/modulefiles/.tmp/gcc" perms="0644">
#%Module1.0
module-whatis "gcc Compiler"
module-whatis "Version: VERSION"
module-whatis "Description: gcc Compiler"
# Allow unload only from another (compiler) module's load
if {[module-info mode remove] &amp;&amp; ! [module-info mode load]} {
  puts stderr "Cannot unload compiler module"
  puts stderr "Load a different compiler module instead"
  exit 1
}
# If loading, first unload potentially compiler-dependent modules, followed by
# other compiler modules
set compilers [list]
set noncompilers [list]
if { [info exists env(LOADEDMODULES)] &amp;&amp; ! [module-info mode remove] } {
  foreach mod [split $env(LOADEDMODULES) ":"] {
    if { ! [file exists "/opt/modulefiles/compilers/$mod"] } {
      lappend noncompilers $mod
    } elseif {$mod ne [module-info name]} {
      lappend compilers $mod
    }
  }
}
foreach mod [concat $noncompilers $compilers] {
  module unload $mod
}
# Compiler environment modifications: none needed
# Reload non-compiler modules
foreach mod $noncompilers {
  module load $mod
}
</file>
/usr/bin/perl -pi -e "s/VERSION/$version/" /opt/modulefiles/.tmp/gcc
/bin/cp /opt/modulefiles/.tmp/gcc /opt/modulefiles/compilers/gcc/$version

<file name="/opt/modulefiles/.tmp/gcc.version" perms="0644">
#%Module1.0
set ModulesVersion "VERSION"
</file>
/usr/bin/perl -pi -e "s/VERSION/$version/" /opt/modulefiles/.tmp/gcc.version
/bin/cp /opt/modulefiles/.tmp/gcc.version \
        /opt/modulefiles/compilers/gcc/.version.$version

/bin/ln -s /opt/modulefiles/compilers/gcc/.version.$version \
           /opt/modulefiles/compilers/gcc/.version

</post>

</kickstart>
